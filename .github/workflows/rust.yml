name: build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev libudev-dev
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo fmt --check
      - run: cargo clippy -- -D warnings
      - run: cargo test --all-features

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: val_smoke_timer
            asset_name: val_smoke_timer-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: val_smoke_timer.exe
            asset_name: val_smoke_timer-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: val_smoke_timer
            asset_name: val_smoke_timer-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: val_smoke_timer
            asset_name: val_smoke_timer-macos-aarch64

    steps:
      - uses: actions/checkout@v4
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxi-dev libxtst-dev libudev-dev
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo build --release --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          for dir in artifacts/*/; do
            artifact_name=$(basename "$dir")
            file=$(find "$dir" -type f | head -n 1)
            if [ -n "$file" ]; then
              cp "$file" "release_assets/$artifact_name"
            fi
          done
          ls -la release_assets/
      
      - uses: softprops/action-gh-release@v1
        with:
          files: release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
